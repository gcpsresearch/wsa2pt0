userTunePs <- c("seq(1, 7, by = 2)", "seq(100, 1000, by = 50)", "c(0.01, 0.1)", # gbm
"",                                                             # glm (none)
#"c(0, .1, .2, .3, .4, .6, .8, 1)", "seq(.01, .2, length = 40)", # glmnet
"",                                                             # lda (none)
paste0("seq(2, ", dim(trainFinal)[2] - 1, ", ",
"by = ", floor((dim(trainFinal)[2] - 1)/5), ")"),        # rf
paste0(as.vector(sigmaRange[2])), "2^(-3:11)")                  # svm
packages <- c("plyr", "dplyr", "reshape", "reshape2", "ggplot2", "grid", "catspec",
"RODBC", "foreign","ggthemes", "grid", "gridExtra", "doParallel",
"AppliedPredictiveModeling", "caret", "gbm", "data.table")
lapply(packages, require, character.only=T)
#rm(list=ls())
path <- readLines("c:\\current_path.txt")
# set directories
setwd (paste(path,
"\\Research Projects\\RaisngAchClsngGap",sep=""))
maindir <- paste(path,
"\\Research Projects\\RaisngAchClsngGap",sep="")
dir ()
# functions
vplayout <- function(x, y) {
viewport(layout.pos.row = x, layout.pos.col = y)
}
# convert factor variable to numeric
factorconvert <- function(f){as.numeric (levels (f))[f]}
# trim extra preceding and following characters
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
# change variable case; df name in quotations to be accepted
case.cols <- function(x) {
x.df <- get(x)
colnames(x.df) <- tolower(names(x.df))
assign(x,x.df, env = .GlobalEnv)
}
# write a simple function to add footnote
makeFootnote <- function(footnoteText =
format(Sys.time(), "%d %b %Y"),
size = .7, color = grey(.5))
{
require(grid)
pushViewport(viewport())
grid.text(label = footnoteText ,
x = unit(20,"mm"),
y = unit(1, "mm"),
just = c("left", "bottom"),
gp = gpar(cex = size, col = color))
popViewport()
}
# set years for graduation data
cohortYear_shrt <- c(2011, 2012, 2013) # b/c 2013 doesn't have 4 semesters of time yet
yrs <- length(cohortYear_shrt)  # number of years set below
startYear1       <- "2010-2011"
startYear_shrt1  <- "2011"
startYear2       <- "2011-2012" # for 2012 grads
startYear_shrt2  <- "2012"
startYear3       <- "2012-2013" # for 2013 grads
startYear_shrt3  <- "2013"
startYear <- c(startYear1, startYear2, startYear3)
startYear_shrt <- c(startYear_shrt1, startYear_shrt2, startYear_shrt3)
#Setup Parallel processing ?
cl <- makeCluster(detectCores())
registerDoParallel(cl, cores = detectCores())
#============================================================#
# Load original predictive modeling data (w/o OTPSR var.) ####
#============================================================#
# set directories
setwd (paste(path,
"\\RBES\\WSA 2.0\\student.success.factor",sep=""))
maindir <- paste(path,
"\\RBES\\WSA 2.0\\student.success.factor", sep = "")
dir ()
# variables to keep
keep <-   c("id", "dsevmx_H1", "dsevmn_H1", "drate_H1", "ss_totLA", "ss_totMA",
"ss_totRD", "ss_totSC", "mob_H1", "coreCumulGPA_H1", "lacourseCumulGPA_H1",
"macourseCumulGPA_H1", "fg", "fsl", "sei_all", "startyear_grade_E", "loc_H1",
"lafail_H1", "mafail_H1", "scfail_H1", "zoned_school_E", "zoned_school_name_E",
"ssfail_H1", "corefail_H1", "lafail_from8th_H1", "mafail_from8th_H1", "psr",
"scfail_from8th_H1", "ssfail_from8th_H1", "corefail_from8th_H1", "gft_from8th_H1",
"retained_from04", "gft_H1", "gft_from8th_H1", "gft_H1", "sep_index_H1", "gini_index_H1",
"schl_percSPED_H1", "schl_percESOL_H1", "schlEnr_H1", "schl_percWht_H1", "schlFRL_H1",
"schlAtt_H1", "schl_LAcrct", "schl_MAcrct", "schl_RDcrct", "schl_SCcrct", "spedCatMin_H1",
"spedCatMod_H1", "spedCatSev_H1", "pabs_H1", "percentEnrolledDays_H1", "female", "black",
"hispanic", "other", "frl_H1", "lep_H1", "repgrd_H1", "ss_totLAsq", "ss_totMAsq", "ss_totRDsq",
"ss_totSCsq", "schl_LAcrctsq", "schl_MAcrctsq", "schl_RDcrctsq", "schl_fg", "schl_fsl",
"schl_sei_all", "schl_SCcrctsq", "p.e", "ap.t","ib.t","ontimeGrad",  "cum.gpa", "ps.t" )
zoned <- c("zoned_school_E", "zoned_school_name_E")
g8 <-     ""
g9 <-     c("la", "ma", "sc", "ss", "percCore", "percOth", "la", "ma", "sc", "ss",
"percCore", "percOth", "ap_ib_pass_H1", "ap_ib_pass_from8th_H1")
g10 <-    c("psat_scoreCR", "psat_scoreMA", "psat_scoreWR", "psat_collReady", "la",
"ma", "sc", "ss", "percCore", "percOth", "ap_ib_pass_H1",
"ap_ib_pass_from8th_H1")
g11 <-    g10
factors <- c("spedCatMin_H1", "spedCatMod_H1", "spedCatSev_H1", "lafail_H1",
"loc_H1", "mafail_H1", "scfail_H1", "ssfail_H1", "corefail_H1",
"lafail_from8th_H1", "mafail_from8th_H1", "scfail_from8th_H1",
"ssfail_from8th_H1", "corefail_from8th_H1", "ap_ib_pass_H1",
"gft_H1", "sep_index_H1", "gini_index_H1", "psr",
"ap_ib_pass_from8th_H1", "gft_from8th_H1", "psat_collReady",
"retained_from04", "female", "black", "hispanic", "other",
"frl_H1", "lep_H1", "repgrd_H1", "p.e","ontimeGrad",
"ap.t","ib.t", "cum.gpa","ps.t")
disc <- c("dsevmx_H1", "dsevmn_H1", "drate_H1")
# convert factor variable to numeric
factorconvert <- function(f){as.numeric (levels (f))[f]}
# vplayout
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
#==============================================================================
for (p in 11:11) {
#  for (yr in 2012:2013) {
p.grd <- p # historic year grade
# load and clean data
df <- read.csv(paste0("..\\student.success.factor\\data\\prep\\", p.grd, "th",
p.grd + 1, "th_model_only", ".csv"), sep=",",
header = TRUE)
# add polynomials
for(i in c(which(names(df) %in% c("ss_totLA", "ss_totMA", "ss_totRD",
"ss_totSC", "schl_LAcrct",
"schl_MAcrct", "schl_RDcrct",
"schl_SCcrct")))) {
df[[paste0(names(df)[i], "sq")]] <- (df[[i]])**2
}
#create on-time, post-secondary-ready indicator (OTPSR.Grad)
df$psr <- 0
# use best prior predictors if exist and convert to evalyr equivalents
# remove unchangeable things (e.g., PSAT)
if (exists("bal.f")) {
bal.f.clr <- bal.f[(grep("dsev|drate|lacourse|macourse|pabs",
names(bal.f)))] # keeping ones for which we hv E yr data
names(bal.f.clr) <- gsub("CumulGPA_H1", "AnnualGPA_E", names(bal.f.clr))
names(bal.f.clr) <- gsub("H1", "E", names(bal.f.clr))
}
for(z in 1:3) {
if (exists(paste0("bal.ind.f.", z))) {
ind <- get(paste0("bal.ind.f.", z))
ind.clr <- ind[(grep("dsev|drate|lacourse|macourse|pabs",
names(ind)))] # keeping ones for which we hv E yr data
names(ind.clr) <- gsub("CumulGPA_H1", "AnnualGPA_E",
names(ind.clr))
names(ind.clr) <- gsub("H1", "E",
names(ind.clr))
assign(paste0("bal.ind.f.", z, ".clr"), ind.clr)
}
}
if (p.grd == 11) {
# ontime Grad (includes summers via ceiling function) AND
df[df[, which(names(df)=="ontimeGrad")] &
# SAT M and CR >= 520 OR
((is.na(df[, which(names(df)=="scoreMA")]) &
df[, which(names(df)=="scoreMA")] >= 520 &
!is.na(df[, which(names(df)=="scoreVE")]) &
df[, which(names(df)=="scoreVE")] >= 520) |
# ACT E >= 18 and M and R >= 22 OR
(!is.na(df[, which(names(df)=="scoreaEN")]) &
df[, which(names(df)=="scoreaEN")] >= 18 &
!is.na(df[, which(names(df)=="scoreaMA")]) &
df[, which(names(df)=="scoreaMA")] >= 22 &
!is.na(df[, which(names(df)=="scoreaRD")]) &
df[, which(names(df)=="scoreaRD")] >= 22) |
# evaluated year 1st semester GPA >= 83
(!is.na(df[, which(names(df)=="lacourse1SemGPA_E")]) &
df[, which(names(df)=="lacourse1SemGPA_E")] >= 83 &
!is.na(df[, which(names(df)=="macourse1SemGPA_E")]) &
df[, which(names(df)=="macourse1SemGPA_E")] >= 83)),
dim(df)[2]] <- 1
} # END IF p.grd
if (p.grd != 11) {
# maybe make conditions vector and just run cases against it?  the below is really getting complex!!
bal.df <- do.call("rbind", replicate(dim(df)[1], bal.f.clr, simplify = FALSE))
for (z in 1:3) {
if (exists(paste0("bal.ind.f.", z))) {
b <- get(paste0("bal.ind.f.", z))
cbind(bal.df <- do.call("rbind", replicate(dim(df)[1], b, simplify = FALSE)))
}
}
# add the ind ones, bind whole thing to df keeping only Vs in bals, diff based on length counts
df <- cbind(df, bal.df)
# BALANCED PROFILE OUTCOMES
# end year in cohort subsequent grade AND
df[df[, which(names(df)=="startyear_grade_N")] == p.grd + 2 &
# req 1 AND
(!is.na(df[, which(names(df)==names(bal.f.clr)[1])]) &
df[, which(names(df)==names(bal.f.clr)[1])] >= as.numeric(bal.f[1])) &
if(length(bal.f.clr) >= 2) {
# req 2 AND
(!is.na(df[, which(names(df)==names(bal.f)[2])]) &
df[, which(names(df)==names(bal.f)[2])] >= as.numeric(bal.f[2]))
} &
if(length(bal.f.clr) >= 3) {
# req OR (
(!is.na(df[, which(names(df)==names(bal.f)[3])]) &
df[, which(names(df)==names(bal.f)[3])] >= as.numeric(bal.f[3]))
}
, ] <- 1
#-----------------------------#
# INDIVIDUAL PROFILE OUTCOMES
if (exists("bal.ind.f.1")) {
# indiv profile req 1 OR
(!is.na(df[, which(names(df)==names(bal.ind.f.1))]) &
df[, which(names(df)==names(bal.ind.f.1))] >= bal.f[1])
} |
if (exists("bal.ind.f.2")) {
# indiv profile req 2 OR
(!is.na(df[, which(names(df)==names(bal.ind.f.2))]) &
df[, which(names(df)==names(bal.ind.f.2))] >= bal.ind.f.2)
} |
if (exists("bal.ind.f.3")) {
# indiv profile req 2 OR
(!is.na(df[, which(names(df)==names(bal.ind.f.3))]) &
df[, which(names(df)==names(bal.ind.f.3))] >= bal.ind.f.3)
}
dim(df)[2] <- 1
} # END IF p.grd != 11
# keep only variables for modeling
dfm <- df[, which(names(df) %in% c(keep, get(paste("g", p.grd, sep = ""))))]
# check only removed intended variables
names(df)[-which(names(df) %in% names(dfm))]
# subset numeric variables for graphing
nums <- names(dfm[, sapply(dfm, function(x) class(x) %in%
c("numeric", "integer"))])
# check all kids enrolled in E year
stopifnot(min(df$daysenrolled_E) > 0)
# set NA for disciplinary incidents to 0
dfm[, which(names(dfm) %in% disc)][is.na(dfm[, which(names(dfm) %in% disc)])
& dfm$percentEnrolledDays_H1 > 0] <- 0
# convert from incidents per day to per 90 days
dfm[, which(names(dfm) %in% c("drate_H1", "mob_H1"))] <-
dfm[, which(names(dfm) %in% c("drate_H1", "mob_H1"))]*90
if(p.grd > 9) {
dfm[!is.na(dfm$psat_scoreCR) & dfm$psat_scoreCR == 0,
which(names(dfm) %in% c("psat_scoreCR", "psat_collReady"))] <- NA
dfm[!is.na(dfm$psat_scoreMA) & dfm$psat_scoreMA == 0,
which(names(dfm) %in% c("psat_scoreMA", "psat_collReady"))] <- NA
dfm[!is.na(dfm$psat_scoreWR) & dfm$psat_scoreWR == 0,
which(names(dfm) == "psat_scoreWR")] <- NA
}
#========================#
### Load the NSC data ####
#========================#
nsc <- read.csv(paste0(path, "\\Research Projects\\NSC Student Tracker\\",
"NSC StudentTracker_2014.10_2014Graduates\\received\\",
"1302550hs_10001139-28963-DETAIL-EFFDT-20141126-RUNDT-20141204.csv"),
sep = ",", header = TRUE)
nsc <- case.cols("nsc")
# change NA enrollment begin and end dates so can't count within enrollment periods
nsc[is.na(nsc$enrollment_begin), "enrollment_begin" ] <- 0
nsc[is.na(nsc$enrollment_end), "enrollment_end" ] <- 0
# keep students graduating in cohort years and assign cohort
nsc$cohort <- NA
for (i in 1:yrs) {
nsc[nsc$high_school_grad_date > (cohortYear_shrt[i] - 1)*10000 + 0801 &
nsc$high_school_grad_date < cohortYear_shrt[i]*10000 + 0731, dim(nsc)[2]] <- cohortYear_shrt[i]
}
# (F)ull-time, (H)alf-time, (L)ess than half-time, (Q) 3/4 time,
#   (A) Leave of absence, (W)ithdrawn, (D)eceased
#   from: http://www.studentclearinghouse.org/colleges/files/ST_DetailReportGuide.pdf
# create gcps id
nsc[,1] <- as.character(nsc[,1])
nsc$id <- as.numeric(substr(nsc[,1], 1, nchar(nsc[,1]) - 1))
nsc <- nsc[!is.na(nsc$cohort), ]
# create immed.transition and persist.enroll variables
nsc$i.t <- FALSE
nsc$p.e1 <- FALSE
#   nsc$p.e2 <- FALSE
#   nsc$p.e3 <- FALSE
for (i in 1:yrs) {
nsc[nsc$i.t == FALSE, "i.t"] <- nsc[nsc$i.t == FALSE, "enrollment_begin"] < cohortYear_shrt[i]*10000 + 1101 &
nsc[nsc$i.t == FALSE, "enrollment_end"] > cohortYear_shrt[i]*10000 + 915 &
nsc[nsc$i.t == FALSE, "cohort"] == cohortYear_shrt[i] #&
nsc[nsc$i.t == FALSE, "enrollment_status"] == "F"
#     nsc[nsc$i.t == FALSE, "i.t"] <- as.numeric(nsc[nsc$i.t == FALSE, "enrollment_begin"]) < cohortYear_shrt[i]*10000 + 1231 &
#                    as.numeric(nsc[nsc$i.t == FALSE, "enrollment_begin"]) > cohortYear_shrt[i]*10000 + 0801
#                    nsc[nsc$i.t == FALSE, "cohort"] == cohortYear_shrt[i]
#
it <- ddply(nsc[, c("id", "i.t")], "id", summarise,
immed.t = sum(i.t))
it$i.t <- it$immed.t > 0
nsc <- nsc[, -(which(names(nsc) %in% c("i.t")))]
nsc <- merge(nsc, it[, c(1, 3)], by.x = "id", by.y = "id", all.x = TRUE)
nsc[nsc$p.e1 == FALSE, "p.e1"] <- nsc[nsc$p.e1 == FALSE, "i.t"] == TRUE &
nsc[nsc$p.e1 == FALSE, "enrollment_begin"] < (cohortYear_shrt[i] + 1)*10000 + 501 &
nsc[nsc$p.e1 == FALSE, "enrollment_end"] > (cohortYear_shrt[i] + 1)*10000 + 301 &
nsc[nsc$p.e1 == FALSE, "cohort"] == cohortYear_shrt[i] &
nsc[nsc$p.e1 == FALSE, "enrollment_status"] %in% c("F", "Q")
}
mrg <- ddply(nsc[, c("id", "p.e1",
#"p.e2", "p.e3",
"i.t")], "id", summarise,
pe1 = sum(p.e1),
#                    pe2 = sum(p.e2),
#                    pe3 = sum(p.e3),
i.t = sum(i.t))
mrg$p.e <- mrg$pe1 >= 1 #& mrg$pe2 == 1 & mrg$pe3 == 1
nsc <- merge(nsc, mrg[, c("id", "i.t", "p.e")], by.x = "id", by.y = "id", all.x = TRUE)
colnames(nsc)[which(names(nsc) == "i.t.x")] <- "i.t"
nsc <- unique(nsc[, c("id", "first_name", "middle_name", "last_name",
"high_school_grad_date", "cohort", "i.t", "p.e")])
nsc.model <- nsc[, c("id","cohort" ,"i.t", "p.e")]
#======================#
#### get AP/IB data ####
#======================#
# AP Exam of 3+ or A or B average in IB courses with >= 1.0 credits earned
ma_ch <- odbcConnect("ODS_Prod_MA", uid = "Research", pwd = "Research")
# ib courses
ib.link <- sqlQuery(ma_ch, paste0("
SELECT  [COURSE]
,[LONGTITLE]
FROM [GSDR].[GEMS].[SASI_ACRS]
WHERE FTE_TYPE = 'B'
"))
ib.link <- case.cols("ib.link")
gsdr.ib <- sqlQuery(ma_ch, paste0("
SELECT [PERMNUM]
,[SCHOOL_YEAR]
,[COURSE]
,[CREDIT_EARNED]
,[MARK_NUMERIC]
FROM   [GSDR].[GEMS].[SDRD_HIST]
WHERE  [SCHOOL_YEAR] >=", cohortYear_shrt[1] - 3, " and
[SCHOOL_YEAR] <=", cohortYear_shrt[length(cohortYear_shrt)], " and
cast(CREDIT_EARNED as int) > 0
"))
gsdr.ib <- case.cols("gsdr.ib")
gsdr.ib <- merge(gsdr.ib, ib.link, by.x = "course", by.y = "course")
names(gsdr.ib)[which(names(gsdr.ib) == "permnum")] <- "id"
gsdr.ib$mark_numeric <- as.character(gsdr.ib$mark_numeric)
gsdr.ib$mark_numeric <- as.numeric(gsdr.ib$mark_numeric)
gsdr.ib.agg <- ddply(gsdr.ib[, c("id", "mark_numeric", "credit_earned")], "id", summarise,
wtdMk  = sum(mark_numeric*credit_earned*.001),
creds = sum(credit_earned*.001))
gsdr.ib.agg$mark <- gsdr.ib.agg$wtdMk/gsdr.ib.agg$creds
gsdr.ib.agg$ib.t2 <- gsdr.ib.agg$mark >= 80 & gsdr.ib.agg$creds >= 1
ib <- sqlQuery(ma_ch, paste0("
SELECT [permnum]
,[grade]
,[school_year]
,[term]
,[course]
,[course_name]
,[mark]
,[credit_attempted]
,[credit_earned]
,[course_identifier]
FROM [ResearchAndEvaluation].[dbo].[APCourses]
WHERE school_year >=", cohortYear_shrt[1] - 3, " and
school_year <=", cohortYear_shrt[length(cohortYear_shrt)], " and
course_identifier = 'I' and
credit_earned > 0
"))
ib <- case.cols("ib")
names(ib)[which(names(ib) == "permnum")] <- "id"
ib$mark <- as.character(ib$mark)
ib[ib$mark == "AUD", "mark"] <- "0"
ib$mark <- as.numeric(ib$mark)
ib.agg <- ddply(ib[, c("id", "mark", "credit_earned")], "id", summarise,
wtdMk  = sum(mark*credit_earned),
creds = sum(credit_earned))
ib.agg$mark <- ib.agg$wtdMk/ib.agg$creds
ib.agg$ib.t <- ib.agg$mark >= 80 & ib.agg$creds >= 1
# ap exams; uses "- 4" to get back to 8th grade for earliest cohort
ap <- sqlQuery(ma_ch, paste0("
SELECT [STUNUMB]
,[TEST_KEY]
,[GRADE]
,[EXAM_ADMIN_DATE]
,[SCORE]
,[SCHOOL_YEAR]
FROM [Assessment].[dbo].[TEST_STU_APP]
WHERE SCHOOL_YEAR >=", cohortYear_shrt[1] - 4, " and
SCHOOL_YEAR <=", cohortYear_shrt[length(cohortYear_shrt)], " and
SCORE is not null and
SCORE != 0
"))
ap <- case.cols("ap")
names(ap)[which(names(ap) == "stunumb")] <- "id"
ap.agg <- ddply(ap[, c("id", "score")], "id", summarise,
mxScr  = max(score))
ap.agg$ap.t <- ap.agg$mxScr >= 3
odbcClose(ma_ch)
ma_ch <- odbcConnect("ODS_Prod_MA", uid = "Research", pwd = "Research")
dual <- sqlQuery(ma_ch, paste0("
SELECT distinct t1.[SCHOOL_YEAR]
,t2.[TITLE]
,t1.[MARK_NUMERIC]
,t1.[PERMNUM]
,t1.[SCHOOL]
,t2.[COURSE]
,t2.[CREDVALUE]
FROM [GSDR].[GEMS].[SDRD_HIST] t1 LEFT JOIN [GSDR].[GEMS].[SASI_ACRS] t2 ON
t1.COURSE = t2.COURSE
WHERE t1.SCHOOL_YEAR >= 2012 and
t2.LONGTITLE LIKE 'PS %'
"))
odbcClose(ma_ch)
dual <- case.cols("dual")
names(dual)[which(names(dual) == "permnum")] <- "id"
dual$mark.t <- dual$mark_numeric >=90
dual <- data.table(dual)
keycols  <- c("id", "school_year", "title")
dual.agg <- dual[,.(mean(mark_numeric), sum(mark.t), sum(credvalue)), by = "id,school_year,title"]
setnames(dual.agg,c("V1","V2","V3"), c("course_avg", "credits_earned", "credits_att"))
setkeyv(dual.agg, keycols)
dual.agg$ps <- dual.agg$credits_earned >=1
dual.agg.t <-  dual.agg[,.(mean(course_avg), sum(credits_att), sum(credits_earned), mean(ps)), by = "id,school_year"]
setnames(dual.agg.t,"V1", "cum_gpa")
dual.agg.t$ps.t <- dual.agg.t$V4 >0
dual.enr <- dual.agg.t[,c("id", "school_year", "cum_gpa", "ps.t"), with = FALSE]
dual.enr <- data.frame(dual.enr)
dfm <- merge(df, nsc.model, by = "id", all.x =  TRUE)
apib <- merge(ap.agg, ib.agg, by = "id", all.x = TRUE, all.y = TRUE)
dfm.m <- merge(dfm, apib, by = "id", all.x = TRUE)
dfm <- merge(dfm.m, dual.enr, by = "id", all.x = TRUE)
dfm <- data.frame(dfm)
# keep only variables for modeling
dfm <- dfm[, which(names(dfm) %in% c(keep, get(paste("g", p.grd, sep = ""))))]
# check only removed intended variables
names(dfm)[-which(names(dfm) %in% names(dfm))]
dfm$ap.t[is.na(dfm$ap.t)] <- FALSE
dfm$ib.t[is.na(dfm$ib.t)] <- FALSE
dfm$p.e[is.na(dfm$p.e)] <- FALSE
# subset numeric variables for graphing
nums <- names(dfm[, sapply(dfm, function(x) class(x) %in%
c("numeric", "integer"))])
save.image("H:/wsa2.0/data/prep/wsa2pt0_18mar2015.RData")
}
#=====================================================================================#
# check all kids enrolled in E year
stopifnot(min(df$daysenrolled_E) > 0)
# set NA for disciplinary incidents to 0
dfm[, which(names(dfm) %in% disc)][is.na(dfm[, which(names(dfm) %in% disc)])
& dfm$percentEnrolledDays_H1 > 0] <- 0
# convert from incidents per day to per 90 days
dfm[, which(names(dfm) %in% c("drate_H1", "mob_H1"))] <-
dfm[, which(names(dfm) %in% c("drate_H1", "mob_H1"))]*90
if(p.grd > 9) {
dfm[!is.na(dfm$psat_scoreCR) & dfm$psat_scoreCR == 0,
which(names(dfm) %in% c("psat_scoreCR", "psat_collReady"))] <- NA
dfm[!is.na(dfm$psat_scoreMA) & dfm$psat_scoreMA == 0,
which(names(dfm) %in% c("psat_scoreMA", "psat_collReady"))] <- NA
dfm[!is.na(dfm$psat_scoreWR) & dfm$psat_scoreWR == 0,
which(names(dfm) == "psat_scoreWR")] <- NA
}
#=========
# EXPLORE ####
#=========
# ADD CORR PLOT, ADD CHECK HISTOGRAMS AFTER TRANSFORMATION (MAYBE MAKE FUNCTION?)
## The correlation matrix of the new data
dfm.c <- dfm[, nums]
dfm.c <- dfm.c[, -c(nearZeroVar(dfm.c), which(names(dfm.c) == "id"))]
predCor <- cor(dfm.c, use = "pairwise.complete.obs")
library(corrplot)
pdf(paste(maindir, "\\results\\graphs\\", p.grd, "th", p.grd + 1,
"corrPlot.pdf", sep = ""),
width = 13, height = 15)
corrplot(predCor,
order = "hclust",
type = "upper")
dev.off()
require(grid)
# examine univariate histograms; requires adjacent variables for looping
pdf(paste(maindir, "\\results\\graphs\\", p.grd, "th", p.grd + 1,
"thUnivHists.pdf", sep = ""),
width = 24, height = 18)
dfn <- dfm[, which(names(dfm) %in% nums[-which(nums %in% c("id", "loc_H1"))])]
# set variable range once by column #s or column names
start <-  1
vs <- dim(dfn)[2]
#         start <- which(names(df.n) == "dsevmx_H1")
#         vs <- which(names(df.n) == "coreCumulGPA_H1") - start + 2
for(i in 1:(ceiling(vs/7))) {
grid.newpage()
pushViewport(viewport(layout = grid.layout(min(7, vs), 4)))
# scales to matrix location of variables for graphing
range <- (min((i-1)*6+(start)):max((i-1)*6+(start + 5)))
for(j in range) {
# variable-specific removal of NAs
d.h <- dfn[!is.na(dfn[, j]), ]
sd <- sd(d.h[, j])
bin <- min(ceiling(length(unique(d.h[, j]))/30), .2*sd)
h2 <- ggplot(data = d.h, aes(d.h[, j]))
h2 <- h2 + geom_histogram(binwidth = 2*bin) #colour = df.n$p.e,
h2 <- h2 + xlab(paste(names(d.h)[j], ": binwidth = ",
round(2*bin, 2), sep = ""))
h2
h1 <- ggplot(data = d.h, aes(d.h[, j]))
h1 <- h1 + geom_histogram(binwidth = 1*bin) # colour = "white",
h1 <- h1 + xlab(paste(names(d.h)[j], ": binwidth = ",
round(1*bin, 2), sep = ""))
h1
h.5 <- ggplot(data = d.h, aes(d.h[, j]))
h.5 <- h.5 + geom_histogram(binwidth = .5*bin) # colour = "white",
h.5 <- h.5 + xlab(paste(names(d.h)[j], ": binwidth = ",
round(.5*bin, 2), sep = ""))
h.5
h.1 <- ggplot(data = d.h, aes(d.h[, j]))
h.1 <- h.1 + geom_histogram(binwidth = .1*bin) # colour = "white",
h.1 <- h.1 + xlab(paste(names(d.h)[j], ": binwidth = ",
round(.1*bin, 2), sep = ""))
h.1
# + 2 scales graphs to 2nd row to lv room for title
k <- as.numeric((j - min(range) + 2))
print(h2, vp = vplayout(k, 1))
print(h1, vp = vplayout(k, 2))
print(h.5, vp = vplayout(k, 3))
print(h.1, vp = vplayout(k, 4))
}
grid.text(paste("WSA 2.0 SSI", p.grd, "th", p.grd + 1,
"Predictor Distributions: ",
"\n Shown with Varied Bin Widths \n Page: ", i, sep = ""),
vp = viewport(layout.pos.row = 1, layout.pos.col = 1:4,
just = "centre"))
}
